'use client';

import { useState, useEffect } from 'react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { toast } from 'sonner';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Calendar } from '@/components/ui/calendar';
import { CalendarIcon, Loader2, RefreshCw } from 'lucide-react';
import { cn } from '@/lib/utils';
import { purchaseCredits, getCreditHistory } from '@/lib/api/credits';
import { getClientInfo, ClientInfo } from '@/lib/api/client';
import { getUserFromCookies } from '@/lib/auth';
import { v4 as uuidv4 } from 'uuid';

interface CreditRequest {
  id: string;
  requestCode: string;
  clientId: string;
  quantity: number;
  status: string;
  rejectReason: string | null;
  createdAt: string;
  validatedAt: string | null;
  pricePerSmsTtc: number | null;
  estimatedAmountTtc: number | null;
}

export default function CommandesPage() {
  const [quantity, setQuantity] = useState<number>(1);
  const [isLoading, setIsLoading] = useState(false);
  const [history, setHistory] = useState<CreditRequest[]>([]);
  const [isLoadingHistory, setIsLoadingHistory] = useState(true);
  const [clientInfo, setClientInfo] = useState<ClientInfo | null>(null);
  const [estimatedCost, setEstimatedCost] = useState<number | null>(null);
  const [page, setPage] = useState(1);
  const [pageSize] = useState(5);
  const [totalItems, setTotalItems] = useState(0);
  const [currentItems, setCurrentItems] = useState<CreditRequest[]>([]);
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [dateFilter, setDateFilter] = useState<{from?: Date, to?: Date}>({});
  const [hasPendingRequest, setHasPendingRequest] = useState(false);
  
  const user = getUserFromCookies();
  const totalPages = Math.ceil(totalItems / pageSize) || 1;

  // Charger les informations du client
  useEffect(() => {
    const loadClientInfo = async () => {
      if (!user?.id) return;
      
      try {
        const data = await getClientInfo(user.id);
        setClientInfo(data);
      } catch (error) {
        console.error('Error al cargar la información del cliente:', error);
      }
    };
    
    loadClientInfo();
  }, [user?.id]);
  
  // Mettre à jour le coût estimé lorsque la quantité change
  useEffect(() => {
    if (clientInfo && quantity > 0) {
      const cost = clientInfo.coutSmsTtc * quantity;
      setEstimatedCost(cost);
    } else {
      setEstimatedCost(null);
    }
  }, [quantity, clientInfo]);

  // Vérifier s'il y a une commande en attente
  useEffect(() => {
    const pendingRequest = history.some(item => item.status === 'PENDING');
    setHasPendingRequest(pendingRequest);
  }, [history]);

  // Charger l'historique des commandes
  useEffect(() => {
    let isMounted = true;
    let retryCount = 0;
    const maxRetries = 3;
    const retryDelay = 2000;

    const loadHistory = async () => {      
      if (!isMounted) return;
      
      try {
        setIsLoadingHistory(true);
        const data = await getCreditHistory();
        
        if (isMounted) {
          setHistory(data);
          setTotalItems(data.length);
          retryCount = 0;
        }
      } catch (error) {
        console.error('Error al cargar el historial:', error);
        
        if (retryCount < maxRetries) {
          retryCount++;
          console.log(`Reintentando en ${retryDelay}ms (${retryCount}/${maxRetries})`);
          await new Promise(resolve => setTimeout(resolve, retryDelay));
          loadHistory();
        } else {
          if (isMounted) {
            toast.error('Error al cargar los pedidos');
          }
        }
      } finally {
        if (isMounted) {
          setIsLoadingHistory(false);
        }
      }
    };

    loadHistory();
    const intervalId = setInterval(() => {
      if (document.visibilityState === 'visible') {
        loadHistory();
      }
    }, 10000);

    return () => {
      isMounted = false;
      clearInterval(intervalId);
    };
  }, []);
  
  const refreshHistory = async () => {
    try {
      const data = await getCreditHistory();
      setHistory(data);
      setTotalItems(data.length);
      setPage(1);
    } catch (error) {
      console.error('Error al actualizar el historial:', error);
      toast.error('Error al actualizar el historial');
    }
  };
  
  const paginate = (pageNumber: number) => {
    setPage(pageNumber);
  };
  
  useEffect(() => {
    if (history.length > 0) {
      let filteredHistory = [...history];
      
      if (statusFilter !== 'all') {
        filteredHistory = filteredHistory.filter(
          item => item.status === statusFilter
        );
      }
      
      if (dateFilter.from || dateFilter.to) {
        filteredHistory = filteredHistory.filter(item => {
          const itemDate = new Date(item.createdAt);
          const fromDate = dateFilter.from ? new Date(dateFilter.from.setHours(0, 0, 0, 0)) : null;
          const toDate = dateFilter.to ? new Date(dateFilter.to.setHours(23, 59, 59, 999)) : null;
          
          return (
            (!fromDate || itemDate >= fromDate) &&
            (!toDate || itemDate <= toDate)
          );
        });
      }
      
      const sortedHistory = filteredHistory.sort((a, b) => 
        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      );
      
      setTotalItems(sortedHistory.length);
      const startIndex = (page - 1) * pageSize;
      const paginatedData = sortedHistory.slice(startIndex, startIndex + pageSize);
      setCurrentItems(paginatedData);
      
      if (page > 1 && (page - 1) * pageSize >= sortedHistory.length) {
        setPage(1);
      }
    } else {
      setCurrentItems([]);
      setTotalItems(0);
    }
  }, [history, page, pageSize, statusFilter, dateFilter]);

  const handlePurchase = async () => {
    if (quantity < 1) {
      toast.error('La cantidad debe ser mayor a 0');
      return;
    }

    setIsLoading(true);
    try {
      const user = getUserFromCookies();
      if (!user) {
        throw new Error('Usuario no conectado');
      }

      const idempotencyKey = uuidv4();
      
      await purchaseCredits({
        clientId: user.id,
        quantity: quantity,
        idempotencyKey: idempotencyKey
      });
      
      toast.success(`Pedido de ${quantity} crédito(s) realizado con éxito`);
      setQuantity(1);
      await refreshHistory();
      
    } catch (error) {
      console.error('Error en el pedido:', error);
      const errorMessage = error instanceof Error ? error.message : 'Ha ocurrido un error';
      toast.error(`Error en el pedido: ${errorMessage}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto py-6 space-y-8">
      <div className="space-y-2">
        <h2 className="text-2xl font-bold tracking-tight">Pedido de SMS</h2>
        <p className="text-muted-foreground">
          Cuenta prepago
        </p>
      </div>
      
      <div className="grid gap-6 md:grid-cols-1 lg:grid-cols-3">
        <div className="lg:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle>Realizar un pedido</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="quantity">Cantidad de SMS</Label>
                  <Input
                    id="quantity"
                    type="number"
                    min="1"
                    value={quantity}
                    onChange={(e) => setQuantity(Number(e.target.value))}
                    className="mt-1"
                  />
                </div>
                
                {estimatedCost !== null && (
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">Precio unitario:</span>
                      <span className="text-sm font-medium">
                        {clientInfo?.coutSmsTtc ? `${Math.round(clientInfo.coutSmsTtc)} F CFA` : 'N/D'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">Monto total:</span>
                      <span className="text-sm font-medium">
                        {estimatedCost ? `${Math.round(estimatedCost)} F CFA` : 'N/D'}
                      </span>
                    </div>
                  </div>
                )}
                
                <div className="pt-2">
                  <Button 
                    className="w-full"
                    onClick={handlePurchase}
                    disabled={isLoading || hasPendingRequest}
                  >
                    {isLoading ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Procesando...
                      </>
                    ) : hasPendingRequest ? (
                      'Pedido en espera'
                    ) : (
                      'Confirmar pedido'
                    )}
                  </Button>
                  
                  {hasPendingRequest && (
                    <p className="mt-2 text-sm text-muted-foreground text-center">
                      Ya tienes un pedido pendiente de validación
                    </p>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
        
        <div className="lg:col-span-2">
          <Card>
            <CardHeader className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
              <div>
                <CardTitle>Historial de pedidos</CardTitle>
                <CardDescription className="mt-1">
                  Consulta el historial de tus pedidos de SMS
                </CardDescription>
              </div>
              
              <div className="flex flex-col sm:flex-row gap-3 w-full sm:w-auto">
                <Select 
                  value={statusFilter}
                  onValueChange={(value) => {
                    setStatusFilter(value);
                    setPage(1);
                  }}
                >
                  <SelectTrigger className="w-full sm:w-[180px]">
                    <SelectValue placeholder="Filtrar por estado" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Todos los estados</SelectItem>
                    <SelectItem value="PENDING">Pendiente</SelectItem>
                    <SelectItem value="VALIDATED">Aprobado</SelectItem>
                    <SelectItem value="REJECTED">Rechazado</SelectItem>
                  </SelectContent>
                </Select>
                
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className="w-full sm:w-[240px] justify-start text-left font-normal"
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {dateFilter?.from ? (
                        dateFilter.to ? (
                          <>
                            {format(dateFilter.from, 'dd/MM/yyyy')} -{' '}
                            {format(dateFilter.to, 'dd/MM/yyyy')}
                          </>
                        ) : (
                          format(dateFilter.from, 'dd/MM/yyyy')
                        )
                      ) : (
                        <span>Filtrar por fecha</span>
                      )}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="end">
                    <Calendar
                      initialFocus
                      mode="range"
                      defaultMonth={dateFilter?.from || new Date()}
                      selected={dateFilter}
                      onSelect={(range: { from?: Date; to?: Date } | undefined) => {
                        setDateFilter(range || {});
                        setPage(1);
                      }}
                      numberOfMonths={1}
                      className="rounded-md border"
                    />
                    <div className="p-2 text-center">
                      <Button 
                        variant="ghost" 
                        size="sm"
                        onClick={() => {
                          setDateFilter({});
                          setPage(1);
                        }}
                      >
                        Limpiar filtro
                      </Button>
                    </div>
                  </PopoverContent>
                </Popover>
              </div>
            </CardHeader>
            
            <CardContent>
              {isLoadingHistory ? (
                <div className="flex justify-center items-center py-12">
                  <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
                </div>
              ) : currentItems.length === 0 ? (
                <div className="text-center py-12">
                  <p className="text-muted-foreground">
                    {statusFilter !== 'all' || dateFilter.from || dateFilter.to
                      ? 'No se encontraron pedidos con los filtros seleccionados'
                      : 'No hay pedidos recientes'}
                  </p>
                </div>
              ) : (
                <div className="space-y-4">
                  {currentItems.map((item) => (
                    <div key={item.id} className="border rounded-lg p-4">
                      <div className="flex flex-col sm:flex-row justify-between gap-4">
                        <div>
                          <div className="flex items-center gap-2">
                            <span className="font-medium">Pedido #{item.requestCode}</span>
                            <span 
                              className={cn(
                                'px-2 py-0.5 rounded-full text-xs font-medium',
                                item.status === 'VALIDATED' && 'bg-green-100 text-green-800',
                                item.status === 'PENDING' && 'bg-yellow-100 text-yellow-800',
                                item.status === 'REJECTED' && 'bg-red-100 text-red-800'
                              )}
                            >
                              {item.status === 'VALIDATED' && 'Aprobado'}
                              {item.status === 'PENDING' && 'Pendiente'}
                              {item.status === 'REJECTED' && 'Rechazado'}
                            </span>
                          </div>
                          <p className="text-sm text-muted-foreground mt-1">
                            {format(new Date(item.createdAt), 'PPP', { locale: fr })}
                          </p>
                          {item.status === 'REJECTED' && item.rejectReason && (
                            <p className="text-sm text-red-600 mt-2">
                              <span className="font-medium">Motivo del rechazo:</span> {item.rejectReason}
                            </p>
                          )}
                        </div>
                        
                        <div className="text-right">
                          <p className="font-medium">{item.quantity} créditos</p>
                          <p className="text-sm text-muted-foreground">
                            {item.estimatedAmountTtc ? `${Math.round(item.estimatedAmountTtc)} F CFA` : 'N/D'}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
            
            {totalPages > 1 && (
              <CardFooter className="border-t pt-4">
                <div className="flex items-center justify-between w-full">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => paginate(1)}
                    disabled={page <= 1}
                    className="h-8 w-8 p-0"
                    title="Primera página"
                  >
                    &laquo;
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => paginate(Math.max(1, page - 1))}
                    disabled={page <= 1}
                    className="h-8 w-8 p-0"
                    title="Página anterior"
                  >
                    &lsaquo;
                  </Button>
                  
                  <div className="text-sm text-muted-foreground">
                    Página {page} de {totalPages}
                  </div>
                  
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => paginate(Math.min(totalPages, page + 1))}
                    disabled={page >= totalPages}
                    className="h-8 w-8 p-0"
                    title="Siguiente página"
                  >
                    &rsaquo;
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => paginate(totalPages)}
                    disabled={page >= totalPages}
                    className="h-8 w-8 p-0"
                    title="Última página"
                  >
                    &raquo;
                  </Button>
                </div>
              </CardFooter>
            )}
            
            <CardFooter className="border-t pt-4">
              <div className="flex justify-end w-full">
                <Button 
                  variant="outline"
                  size="sm"
                  onClick={refreshHistory}
                  disabled={isLoadingHistory}
                >
                  {isLoadingHistory ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <RefreshCw className="mr-2 h-4 w-4" />
                  )}
                  Actualizar
                </Button>
              </div>
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  );
}
